{"ast":null,"code":"var _jsxFileName = \"/Users/jamesverschleiser/VisuOL/21f-visuol/visuol/src/components/compensation/compensation-layout.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { Divider } from 'antd';\nimport { withRouter } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { BASE_URL } from '../../OfferAPI';\nimport { YearlyCompensation, YearlySavings, DataTransform } from './Graphs';\nimport numberWithCommas from '../../tools/numbersWithCommas';\nimport CompensationHeader from './CompensationHeader';\nimport CompensationConfiguration from './CompensationConfiguration';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst baseColor = '#9696CE';\nconst bonusColor = '#81DDB0';\nconst spendingColor = '#9881dd';\nconst savingsColor = '#cece96';\nconst retirementColor = '#dda481'; // const equityColor = '#DDC981';\n// TODO: connect to api\n\nconst fetchCompensationData = async (id, company, setters) => {\n  const token = localStorage.getItem('token');\n  console.log('fetching');\n  const resp = await axios.post(`${BASE_URL}api_v1/fetch_offer`, {\n    id,\n    company\n  }, {\n    headers: {\n      Authorization: token\n    }\n  });\n  const {\n    base,\n    bonus\n  } = resp.data;\n  const signing = 0;\n  const taxResp = await axios.post(`${BASE_URL}api_v1/fed_taxes`, {\n    married: 'not-married',\n    income: base + bonus\n  }, {\n    headers: {\n      Authorization: token\n    }\n  });\n  const fedTaxRate = taxResp.data.fed_tax_percent;\n  const {\n    setBase,\n    setBonus,\n    setSigning,\n    setFederalTaxRate,\n    setStateTaxRate\n  } = setters;\n  setBase(base != null ? base : 0);\n  setBonus(bonus != null ? bonus : 0);\n  setSigning(0);\n  setFederalTaxRate(fedTaxRate);\n  setStateTaxRate(0);\n};\n\nconst updateComplimentary = (updateSpendingPercentage, updateSavingsPercentage) => savingsValue => {\n  updateSpendingPercentage(100 - savingsValue);\n  updateSavingsPercentage(savingsValue);\n};\n\nconst CompensationLayout = props => {\n  _s();\n\n  const {\n    match\n  } = props;\n  const {\n    id,\n    company\n  } = match.params;\n  const [base, setBase] = useState(0);\n  const [bonus, setBonus] = useState(0);\n  const [signing, setSigning] = useState(0);\n  const [federalTax, setFederalTaxRate] = useState(0);\n  const [stateTax, setStateTaxRate] = useState(0); // Not currently using\n\n  const [bonusAppreciationRate, setBonusAppreciationRate] = useState(0);\n  const [baseAppreciationRate, setBaseAppreciationRate] = useState(0);\n  const [spendingPercentage, setSpendingPercentage] = useState(60);\n  const [savingsPercentage, setSavingsPercentage] = useState(30);\n  const [retirementPercentage, setRetirementPercentage] = useState(4);\n  fetchCompensationData(id, company, {\n    setBase,\n    setBonus,\n    setSigning,\n    setFederalTaxRate,\n    setStateTaxRate\n  });\n\n  const updateValue = setter => value => {\n    setter(value);\n  };\n\n  const totalCompensation = base + bonus;\n  console.log(bonusAppreciationRate, baseAppreciationRate);\n  const graphData = DataTransform({\n    base,\n    bonus,\n    federalTax,\n    stateTax\n  }, baseAppreciationRate, bonusAppreciationRate, savingsPercentage, retirementPercentage, 7);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CompensationHeader, {\n      totalCompensation: numberWithCommas(totalCompensation),\n      position: \"Level 3 SWE\",\n      company: company\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        // position: 'sticky', TODO: NEED TO ADD TOGGLE BEFORE WE MAKE THIS STICKY\n        top: 0,\n        opacity: 1,\n        zIndex: 5000,\n        // arbitrary high value\n        backgroundColor: '#F0F2F5'\n      },\n      children: [/*#__PURE__*/_jsxDEV(YearlyCompensation, {\n        data: graphData,\n        baseColor: baseColor,\n        bonusColor: bonusColor,\n        spendingPercentage: spendingPercentage,\n        savingsPercentage: savingsPercentage,\n        retirementPercentage: retirementPercentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YearlySavings, {\n        data: graphData,\n        spendingColor: spendingColor,\n        savingsColor: savingsColor,\n        retirementColor: retirementColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CompensationConfiguration, {\n      base: base,\n      bonus: bonus,\n      savingsPercentage: savingsPercentage,\n      retirementPercentage: retirementPercentage,\n      updateBaseRate: updateValue(setBaseAppreciationRate),\n      updateBonusRate: updateValue(setBonusAppreciationRate),\n      updateSavingsPercentage: updateComplimentary(setSpendingPercentage, setSavingsPercentage),\n      updateRetirementPercentage: updateValue(setRetirementPercentage),\n      baseColor: baseColor,\n      bonusColor: bonusColor,\n      savingsColor: savingsColor,\n      retirementColor: retirementColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CompensationLayout, \"P8zK2MjbpYXa1QDvlGz1YzAQO10=\");\n\n_c = CompensationLayout;\nexport default _c2 = withRouter(CompensationLayout);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CompensationLayout\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/jamesverschleiser/VisuOL/21f-visuol/visuol/src/components/compensation/compensation-layout.jsx"],"names":["Divider","withRouter","React","useState","axios","BASE_URL","YearlyCompensation","YearlySavings","DataTransform","numberWithCommas","CompensationHeader","CompensationConfiguration","baseColor","bonusColor","spendingColor","savingsColor","retirementColor","fetchCompensationData","id","company","setters","token","localStorage","getItem","console","log","resp","post","headers","Authorization","base","bonus","data","signing","taxResp","married","income","fedTaxRate","fed_tax_percent","setBase","setBonus","setSigning","setFederalTaxRate","setStateTaxRate","updateComplimentary","updateSpendingPercentage","updateSavingsPercentage","savingsValue","CompensationLayout","props","match","params","federalTax","stateTax","bonusAppreciationRate","setBonusAppreciationRate","baseAppreciationRate","setBaseAppreciationRate","spendingPercentage","setSpendingPercentage","savingsPercentage","setSavingsPercentage","retirementPercentage","setRetirementPercentage","updateValue","setter","value","totalCompensation","graphData","top","opacity","zIndex","backgroundColor"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport {\n  Divider,\n} from 'antd';\n\nimport { withRouter } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { BASE_URL } from '../../OfferAPI';\nimport { YearlyCompensation, YearlySavings, DataTransform } from './Graphs';\nimport numberWithCommas from '../../tools/numbersWithCommas';\nimport CompensationHeader from './CompensationHeader';\nimport CompensationConfiguration from './CompensationConfiguration';\n\nconst baseColor = '#9696CE';\nconst bonusColor = '#81DDB0';\nconst spendingColor = '#9881dd';\nconst savingsColor = '#cece96';\nconst retirementColor = '#dda481';\n// const equityColor = '#DDC981';\n\n// TODO: connect to api\nconst fetchCompensationData = async (id, company, setters) => {\n  const token = localStorage.getItem('token');\n  console.log('fetching');\n  const resp = await axios.post(`${BASE_URL}api_v1/fetch_offer`, {\n    id,\n    company,\n  }, {\n    headers: { Authorization: token },\n  });\n\n  const {\n    base,\n    bonus,\n  } = resp.data;\n  const signing = 0;\n\n  const taxResp = await axios.post(`${BASE_URL}api_v1/fed_taxes`, {\n    married: 'not-married',\n    income: base + bonus,\n  }, {\n    headers: { Authorization: token },\n  });\n\n  const fedTaxRate = taxResp.data.fed_tax_percent;\n\n  const {\n    setBase,\n    setBonus,\n    setSigning,\n    setFederalTaxRate,\n    setStateTaxRate,\n  } = setters;\n\n  setBase(base != null ? base : 0);\n  setBonus(bonus != null ? bonus : 0);\n  setSigning(0);\n  setFederalTaxRate(fedTaxRate);\n  setStateTaxRate(0);\n};\n\nconst updateComplimentary = (updateSpendingPercentage,\n  updateSavingsPercentage) => (savingsValue) => {\n  updateSpendingPercentage(100 - savingsValue);\n  updateSavingsPercentage(savingsValue);\n};\n\nconst CompensationLayout = (props) => {\n  const { match } = props;\n  const { id, company } = match.params;\n\n  const [base, setBase] = useState(0);\n  const [bonus, setBonus] = useState(0);\n  const [signing, setSigning] = useState(0);\n  const [federalTax, setFederalTaxRate] = useState(0);\n  const [stateTax, setStateTaxRate] = useState(0); // Not currently using\n\n  const [bonusAppreciationRate, setBonusAppreciationRate] = useState(0);\n  const [baseAppreciationRate, setBaseAppreciationRate] = useState(0);\n  const [spendingPercentage, setSpendingPercentage] = useState(60);\n  const [savingsPercentage, setSavingsPercentage] = useState(30);\n  const [retirementPercentage, setRetirementPercentage] = useState(4);\n\n  fetchCompensationData(id, company, {\n    setBase, setBonus, setSigning, setFederalTaxRate, setStateTaxRate,\n  });\n\n  const updateValue = (setter) => (value) => {\n    setter(value);\n  };\n\n  const totalCompensation = base + bonus;\n\n  console.log(bonusAppreciationRate, baseAppreciationRate);\n  const graphData = DataTransform({\n    base, bonus, federalTax, stateTax,\n  },\n  baseAppreciationRate, bonusAppreciationRate, savingsPercentage, retirementPercentage, 7);\n  return (\n    <>\n      <CompensationHeader\n        totalCompensation={numberWithCommas(totalCompensation)}\n        position='Level 3 SWE'\n        company={company}\n      />\n      <div style={{\n        // position: 'sticky', TODO: NEED TO ADD TOGGLE BEFORE WE MAKE THIS STICKY\n        top: 0,\n        opacity: 1,\n        zIndex: 5000, // arbitrary high value\n        backgroundColor: '#F0F2F5',\n      }}\n      >\n        <YearlyCompensation\n          data={graphData}\n          baseColor={baseColor}\n          bonusColor={bonusColor}\n          spendingPercentage={spendingPercentage}\n          savingsPercentage={savingsPercentage}\n          retirementPercentage={retirementPercentage}\n        />\n        <YearlySavings\n          data={graphData}\n          spendingColor={spendingColor}\n          savingsColor={savingsColor}\n          retirementColor={retirementColor}\n        />\n      </div>\n      <Divider />\n      <CompensationConfiguration\n        base={base}\n        bonus={bonus}\n        savingsPercentage={savingsPercentage}\n        retirementPercentage={retirementPercentage}\n        updateBaseRate={updateValue(setBaseAppreciationRate)}\n        updateBonusRate={updateValue(setBonusAppreciationRate)}\n        updateSavingsPercentage={updateComplimentary(setSpendingPercentage, setSavingsPercentage)}\n        updateRetirementPercentage={updateValue(setRetirementPercentage)}\n        baseColor={baseColor}\n        bonusColor={bonusColor}\n        savingsColor={savingsColor}\n        retirementColor={retirementColor}\n      />\n\n    </>\n  );\n};\n\nexport default withRouter(CompensationLayout);\n"]},"metadata":{},"sourceType":"module"}