{"ast":null,"code":"var _jsxFileName = \"/Users/jamesverschleiser/VisuOL/21f-visuol/visuol/src/components/compensation/Graphs.jsx\";\nimport { Area, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ComposedChart } from 'recharts';\nimport React, { PureComponent } from 'react';\nimport numberWithCommas from '../../tools/numbersWithCommas'; // We look at total compensation through the following funnel, Start with Total Compensation,\n// Subtract out amount intended for retirement savings (currently we assume this is out of the\n// untaxed but this is not necessarily the case), then take out taxes, then from that remaining\n// amount, we get spend vs savings. Savings are computed as a savings percentage of post tax\n// post retirement money\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataTransform = (compData, baseGrowth, bonusGrowth, savingsPercentage, retirementSavingsPercentage, years) => {\n  const res = [];\n  let pastSavings = 0;\n  let pastCompensation = 0;\n  let pastTaxes = 0;\n  let nonSavings = 0;\n  let retirementSavings = 0;\n  const {\n    base,\n    bonus,\n    federalTax,\n    stateTax\n  } = compData;\n\n  for (let i = 0; i < years; i += 1) {\n    const data = {}; // Basic Data\n\n    data.Year = i;\n    data.Base = Math.round(base * (1 + baseGrowth / 100) ** i);\n    data.Bonus = Math.round(bonus * (1 + bonusGrowth / 100) ** i);\n    data.Total = data.Base + data.Bonus; // Calculating Tax and Post Tax Compensation\n\n    data.Tax = data.Total * (Number.parseFloat(federalTax) + Number.parseFloat(stateTax));\n    data.PostTaxCompensation = data.Total - data.Tax; // Update accumulated variables\n\n    pastCompensation += data.Total;\n    data.TotalAccumulatedCompensation = pastCompensation;\n    const retirementSavingsDollars = data.Total * (retirementSavingsPercentage / 100);\n    retirementSavings += retirementSavingsDollars;\n    data.RetirementSavings = Math.round(retirementSavings);\n    pastTaxes += Math.round(data.Tax);\n    data.TotalPaidInTaxes = pastTaxes;\n    const savingsDollars = (data.PostTaxCompensation - retirementSavingsDollars) * (savingsPercentage / 100);\n    pastSavings += savingsDollars;\n    data.Savings = Math.round(pastSavings);\n    nonSavings += data.PostTaxCompensation - retirementSavingsDollars - savingsDollars;\n    data.Spending = Math.round(nonSavings);\n    res.push(data);\n  }\n\n  return res;\n};\n_c = DataTransform;\nexport const YearlyCompensation = props => {\n  const {\n    data,\n    baseColor,\n    bonusColor\n  } = props;\n  return /*#__PURE__*/_jsxDEV(LineChart, {\n    width: 730,\n    height: 500,\n    data: data,\n    margin: {\n      top: 20,\n      right: 30,\n      left: 20,\n      bottom: 10\n    },\n    children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n      strokeDasharray: \"3 3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n      dataKey: \"Year\",\n      height: 60,\n      tick: /*#__PURE__*/_jsxDEV(CustomizedAxisTick, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 47\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n      tickFormatter: value => new Intl.NumberFormat('en').format(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: \"Base\",\n      stroke: baseColor,\n      label: /*#__PURE__*/_jsxDEV(CustomizedLabel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 70\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: \"Bonus\",\n      stroke: bonusColor,\n      label: /*#__PURE__*/_jsxDEV(CustomizedLabel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 72\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: \"Total\",\n      stroke: \"#cc3300\",\n      label: /*#__PURE__*/_jsxDEV(CustomizedLabel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 69\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      content: /*#__PURE__*/_jsxDEV(CustomTooltipCompensation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}; // TODO: Update Tooltips\n\n_c2 = YearlyCompensation;\nexport const YearlySavings = props => {\n  const {\n    data,\n    savingsColor,\n    retirementColor,\n    spendingColor\n  } = props;\n  return /*#__PURE__*/_jsxDEV(ComposedChart, {\n    width: 730,\n    height: 500,\n    data: data,\n    margin: {\n      top: 20,\n      right: 30,\n      left: 20,\n      bottom: 10\n    },\n    children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n      strokeDasharray: \"3 3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n      dataKey: \"Year\",\n      height: 60,\n      tick: /*#__PURE__*/_jsxDEV(CustomizedAxisTick, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 47\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n      tickFormatter: value => new Intl.NumberFormat('en').format(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      content: /*#__PURE__*/_jsxDEV(CustomTooltipSavings, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: \"TotalAccumulatedCompensation\",\n      stroke: \"#cc3300\",\n      fill: \"#cc3300\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Area, {\n      type: \"monotone\",\n      dataKey: \"TotalPaidInTaxes\",\n      stackId: \"1\",\n      stroke: \"#6196E5\",\n      fill: \"#6196E5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Area, {\n      type: \"monotone\",\n      dataKey: \"Savings\",\n      stackId: \"1\",\n      stroke: savingsColor,\n      fill: savingsColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Area, {\n      type: \"monotone\",\n      dataKey: \"RetirementSavings\",\n      stackId: \"1\",\n      stroke: retirementColor,\n      fill: retirementColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Area, {\n      type: \"monotone\",\n      dataKey: \"Spending\",\n      stackId: \"1\",\n      stroke: spendingColor,\n      fill: spendingColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_c3 = YearlySavings;\nconst tooltipStyle = {\n  backgroundColor: '#F0F2F5',\n  opacity: 0.70,\n  borderStyle: 'solid',\n  borderRadius: '1px',\n  borderColor: '#dedfe2',\n  fontSize: '12px'\n}; // TODO: Fix hardcoding of tooltips add CSS styling in boxes and font\n\nconst CustomTooltipCompensation = _ref => {\n  let {\n    active,\n    payload,\n    label\n  } = _ref;\n\n  if (active && payload && payload.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tooltip\",\n      style: tooltipStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"label\",\n        children: `Year ${label}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: payload[0].name,\n        children: `${payload[0].name} : ${numberWithCommas(payload[0].value)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: payload[1].name,\n        children: `${payload[1].name} : ${numberWithCommas(payload[1].value)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: payload[2].name,\n        children: `${payload[2].name} : ${numberWithCommas(payload[2].value)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this);\n  }\n\n  return null;\n};\n\n_c4 = CustomTooltipCompensation;\n\nconst CustomTooltipSavings = _ref2 => {\n  let {\n    active,\n    payload,\n    label\n  } = _ref2;\n\n  if (active && payload && payload.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tooltip\",\n      style: tooltipStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"label\",\n        children: `Year ${label}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: payload[0].name,\n        children: `${payload[0].name} : ${numberWithCommas(payload[0].value)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: payload[1].name,\n        children: `${payload[1].name} : ${numberWithCommas(payload[1].value)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: payload[2].name,\n        children: `${payload[2].name} : ${numberWithCommas(payload[2].value)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: payload[3].name,\n        children: `${payload[3].name} : ${numberWithCommas(payload[3].value)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: payload[4].name,\n        children: `${payload[4].name} : ${numberWithCommas(payload[4].value)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  }\n\n  return null;\n};\n\n_c5 = CustomTooltipSavings;\n\nclass CustomizedLabel extends PureComponent {\n  render() {\n    const {\n      x,\n      y,\n      stroke,\n      value\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"text\", {\n      x: x,\n      y: y,\n      dy: -4,\n      fill: stroke,\n      fontSize: 10,\n      textAnchor: \"middle\",\n      children: numberWithCommas(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass CustomizedAxisTick extends PureComponent {\n  render() {\n    const {\n      x,\n      y,\n      payload\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `translate(${x},${y})`,\n      children: /*#__PURE__*/_jsxDEV(\"text\", {\n        x: 0,\n        y: 0,\n        dy: 16,\n        textAnchor: \"end\",\n        fill: \"#666\",\n        transform: \"rotate(0)\",\n        children: `Year ${payload.value}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"DataTransform\");\n$RefreshReg$(_c2, \"YearlyCompensation\");\n$RefreshReg$(_c3, \"YearlySavings\");\n$RefreshReg$(_c4, \"CustomTooltipCompensation\");\n$RefreshReg$(_c5, \"CustomTooltipSavings\");","map":{"version":3,"sources":["/Users/jamesverschleiser/VisuOL/21f-visuol/visuol/src/components/compensation/Graphs.jsx"],"names":["Area","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ComposedChart","React","PureComponent","numberWithCommas","DataTransform","compData","baseGrowth","bonusGrowth","savingsPercentage","retirementSavingsPercentage","years","res","pastSavings","pastCompensation","pastTaxes","nonSavings","retirementSavings","base","bonus","federalTax","stateTax","i","data","Year","Base","Math","round","Bonus","Total","Tax","Number","parseFloat","PostTaxCompensation","TotalAccumulatedCompensation","retirementSavingsDollars","RetirementSavings","TotalPaidInTaxes","savingsDollars","Savings","Spending","push","YearlyCompensation","props","baseColor","bonusColor","top","right","left","bottom","value","Intl","NumberFormat","format","YearlySavings","savingsColor","retirementColor","spendingColor","tooltipStyle","backgroundColor","opacity","borderStyle","borderRadius","borderColor","fontSize","CustomTooltipCompensation","active","payload","label","length","name","CustomTooltipSavings","CustomizedLabel","render","x","y","stroke","CustomizedAxisTick"],"mappings":"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","sourcesContent":["import {\n  Area,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ComposedChart,\n} from 'recharts';\nimport React, { PureComponent } from 'react';\nimport numberWithCommas from '../../tools/numbersWithCommas';\n\n// We look at total compensation through the following funnel, Start with Total Compensation,\n// Subtract out amount intended for retirement savings (currently we assume this is out of the\n// untaxed but this is not necessarily the case), then take out taxes, then from that remaining\n// amount, we get spend vs savings. Savings are computed as a savings percentage of post tax\n// post retirement money\nexport const DataTransform = (compData, baseGrowth,\n  bonusGrowth, savingsPercentage, retirementSavingsPercentage, years) => {\n  const res = [];\n  let pastSavings = 0;\n  let pastCompensation = 0;\n  let pastTaxes = 0;\n  let nonSavings = 0;\n  let retirementSavings = 0;\n  const {\n    base, bonus, federalTax, stateTax,\n  } = compData;\n  for (let i = 0; i < years; i += 1) {\n    const data = {};\n    // Basic Data\n    data.Year = i;\n    data.Base = Math.round((base * ((1 + (baseGrowth) / 100) ** i)));\n    data.Bonus = Math.round(bonus * ((1 + (bonusGrowth) / 100) ** i));\n    data.Total = data.Base + data.Bonus;\n    // Calculating Tax and Post Tax Compensation\n    data.Tax = data.Total * (Number.parseFloat(federalTax) + Number.parseFloat(stateTax));\n    data.PostTaxCompensation = data.Total - data.Tax;\n    // Update accumulated variables\n    pastCompensation += data.Total;\n    data.TotalAccumulatedCompensation = pastCompensation;\n    const retirementSavingsDollars = data.Total * (retirementSavingsPercentage / 100);\n    retirementSavings += retirementSavingsDollars;\n    data.RetirementSavings = Math.round(retirementSavings);\n    pastTaxes += Math.round(data.Tax);\n    data.TotalPaidInTaxes = pastTaxes;\n    const savingsDollars = (data.PostTaxCompensation - retirementSavingsDollars)\n      * (savingsPercentage / 100);\n    pastSavings += savingsDollars;\n    data.Savings = Math.round(pastSavings);\n    nonSavings += data.PostTaxCompensation - retirementSavingsDollars\n      - savingsDollars;\n    data.Spending = Math.round(nonSavings);\n    res.push(data);\n  }\n  return res;\n};\n\nexport const YearlyCompensation = (props) => {\n  const { data, baseColor, bonusColor } = props;\n  return (\n    <LineChart\n      width={730}\n      height={500}\n      data={data}\n      margin={{\n        top: 20,\n        right: 30,\n        left: 20,\n        bottom: 10,\n      }}\n    >\n      <CartesianGrid strokeDasharray='3 3' />\n      <XAxis dataKey='Year' height={60} tick={<CustomizedAxisTick />} />\n      <YAxis tickFormatter={(value) => new Intl.NumberFormat('en').format(value)} />\n      <Line type='monotone' dataKey='Base' stroke={baseColor} label={<CustomizedLabel />} />\n      <Line type='monotone' dataKey='Bonus' stroke={bonusColor} label={<CustomizedLabel />} />\n      <Line type='monotone' dataKey='Total' stroke='#cc3300' label={<CustomizedLabel />} />\n      <Tooltip content={<CustomTooltipCompensation />} />\n      <Legend />\n    </LineChart>\n  );\n};\n// TODO: Update Tooltips\nexport const YearlySavings = (props) => {\n  const {\n    data, savingsColor, retirementColor, spendingColor,\n  } = props;\n  return (\n    <ComposedChart\n      width={730}\n      height={500}\n      data={data}\n      margin={{\n        top: 20,\n        right: 30,\n        left: 20,\n        bottom: 10,\n      }}\n    >\n      <CartesianGrid strokeDasharray='3 3' />\n      <XAxis dataKey='Year' height={60} tick={<CustomizedAxisTick />} />\n      <YAxis tickFormatter={(value) => new Intl.NumberFormat('en').format(value)} />\n      <Tooltip content={<CustomTooltipSavings />} />\n      <Line type='monotone' dataKey='TotalAccumulatedCompensation' stroke='#cc3300' fill='#cc3300' />\n      <Area type='monotone' dataKey='TotalPaidInTaxes' stackId='1' stroke='#6196E5' fill='#6196E5' />\n      <Area type='monotone' dataKey='Savings' stackId='1' stroke={savingsColor} fill={savingsColor} />\n      <Area type='monotone' dataKey='RetirementSavings' stackId='1' stroke={retirementColor} fill={retirementColor} />\n      <Area type='monotone' dataKey='Spending' stackId='1' stroke={spendingColor} fill={spendingColor} />\n      <Legend />\n    </ComposedChart>\n  );\n};\n\nconst tooltipStyle = {\n  backgroundColor: '#F0F2F5',\n  opacity: 0.70,\n  borderStyle: 'solid',\n  borderRadius: '1px',\n  borderColor: '#dedfe2',\n  fontSize: '12px',\n};\n\n// TODO: Fix hardcoding of tooltips add CSS styling in boxes and font\nconst CustomTooltipCompensation = ({ active, payload, label }) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className='tooltip' style={tooltipStyle}>\n        <p className='label'>{`Year ${label}`}</p>\n        <p className={payload[0].name}>{`${payload[0].name} : ${numberWithCommas(payload[0].value)}`}</p>\n        <p className={payload[1].name}>{`${payload[1].name} : ${numberWithCommas(payload[1].value)}`}</p>\n        <p className={payload[2].name}>{`${payload[2].name} : ${numberWithCommas(payload[2].value)}`}</p>\n      </div>\n    );\n  }\n  return null;\n};\n\nconst CustomTooltipSavings = ({ active, payload, label }) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className='tooltip' style={tooltipStyle}>\n        <p className='label'>{`Year ${label}`}</p>\n        <p className={payload[0].name}>{`${payload[0].name} : ${numberWithCommas(payload[0].value)}`}</p>\n        <p className={payload[1].name}>{`${payload[1].name} : ${numberWithCommas(payload[1].value)}`}</p>\n        <p className={payload[2].name}>{`${payload[2].name} : ${numberWithCommas(payload[2].value)}`}</p>\n        <p className={payload[3].name}>{`${payload[3].name} : ${numberWithCommas(payload[3].value)}`}</p>\n        <p className={payload[4].name}>{`${payload[4].name} : ${numberWithCommas(payload[4].value)}`}</p>\n      </div>\n    );\n  }\n  return null;\n};\n\nclass CustomizedLabel extends PureComponent {\n  render() {\n    const {\n      x, y, stroke, value,\n    } = this.props;\n\n    return (\n      <text x={x} y={y} dy={-4} fill={stroke} fontSize={10} textAnchor='middle'>\n        {numberWithCommas(value)}\n      </text>\n    );\n  }\n}\n\nclass CustomizedAxisTick extends PureComponent {\n  render() {\n    const {\n      x, y, payload,\n    } = this.props;\n\n    return (\n      <g transform={`translate(${x},${y})`}>\n        <text x={0} y={0} dy={16} textAnchor='end' fill='#666' transform='rotate(0)'>\n          {`Year ${payload.value}`}\n        </text>\n      </g>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}